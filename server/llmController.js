// Controller for handling LLM API requests
const axios = require('axios');

// Sample initial nodes for fallback
const initialNodes = [
  { id: 1, label: "Decentralized Energy Grids", description: "Systems that distribute energy generation across multiple small-scale sources rather than centralized power plants." },
  { id: 2, label: "Renewable Energy Sources", description: "Energy sources that are naturally replenished on a human timescale, such as sunlight, wind, rain, tides, waves, and geothermal heat." },
  { id: 3, label: "Grid Resilience", description: "The ability of power systems to withstand and recover from extreme events and disruptions." },
  { id: 4, label: "Energy Storage Technologies", description: "Methods of storing energy for later use, including batteries, pumped hydro, and thermal storage." },
  { id: 5, label: "Microgrid Implementation", description: "Small-scale power grids that can operate independently or in coordination with the main grid." },
  { id: 6, label: "Smart Grid Technologies", description: "Digital technology that allows for two-way communication between utilities and consumers." },
  { id: 7, label: "Energy Democratization", description: "Shift of power from centralized entities to individuals and communities in energy production and distribution." },
  { id: 8, label: "Regulatory Frameworks", description: "Legal and policy structures governing energy production, distribution, and consumption." },
  { id: 9, label: "Community-Owned Energy", description: "Energy projects owned and operated by local communities rather than by corporations or governments." },
  { id: 10, label: "Grid Modernization", description: "Upgrading electricity infrastructure to improve reliability, efficiency, security, and integration of renewables." }
];

// Sample child nodes for fallback
const childNodesMap = {
  1: [
    { id: 101, label: "Peer-to-Peer Energy Trading", description: "Systems allowing consumers to buy and sell excess energy directly to each other." },
    { id: 102, label: "Blockchain for Energy", description: "Using distributed ledger technology to manage energy transactions." },
    { id: 103, label: "Virtual Power Plants", description: "Cloud-based distributed power plants that aggregate capacity from multiple sources." }
  ],
  2: [
    { id: 201, label: "Solar Photovoltaics", description: "Technology converting sunlight directly into electricity using semiconducting materials." },
    { id: 202, label: "Wind Power Systems", description: "Conversion of wind energy into electrical power using wind turbines." },
    { id: 203, label: "Hydroelectric Generation", description: "Electricity generated by the gravitational force of falling or flowing water." }
  ],
  // Add more as needed
};

/**
 * Generate a knowledge graph from a user prompt
 * Uses OpenAI or other LLM APIs to create nodes and relationships
 */
exports.generateGraph = async (req, res) => {
  try {
    const { prompt } = req.body;
    
    if (!prompt) {
      return res.status(400).json({ error: 'Prompt is required' });
    }
    
    // Check for API key
    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      console.warn('No OpenAI API key found. Using fallback data.');
      return res.json({
        nodes: initialNodes,
        childNodesMap: childNodesMap
      });
    }
    
    // Create system prompt for the LLM to generate a knowledge graph
    const systemPrompt = `
      You are an AI specialized in generating knowledge graphs from user queries.
      Based on the user's topic, generate:
      1. 10 main nodes (concepts) related to the topic.
      2. For each main node, generate 3 child nodes that represent subtopics or related concepts.
      3. Ensure all nodes have a descriptive label (1-5 words) and a brief description (1-2 sentences).
      
      Format your response as a valid JSON object with the following structure:
      {
        "nodes": [
          { "id": 1, "label": "Main Concept 1", "description": "Description of concept 1" },
          { "id": 2, "label": "Main Concept 2", "description": "Description of concept 2" },
          ...
        ],
        "childNodesMap": {
          "1": [
            { "id": 101, "label": "Child of Concept 1", "description": "Description of child" },
            ...
          ],
          "2": [ ... ],
          ...
        }
      }
    `;
    
    // Call OpenAI API
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-3.5-turbo', // or 'gpt-4' for better results
        messages: [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 2000
      },
      {
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Content-Type': 'application/json'
        }
      }
    );
    
    // Parse the LLM response
    const content = response.data.choices[0].message.content.trim();
    let graphData;
    
    try {
      // Extract JSON from the response (in case there's additional text)
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      const jsonString = jsonMatch ? jsonMatch[0] : content;
      graphData = JSON.parse(jsonString);
      
      // Validate the structure
      if (!graphData.nodes || !graphData.childNodesMap) {
        throw new Error('Invalid response structure');
      }
    } catch (parseError) {
      console.error('Error parsing LLM response:', parseError);
      // Use fallback data on parsing error
      graphData = {
        nodes: initialNodes,
        childNodesMap: childNodesMap
      };
    }
    
    // Return the graph data
    res.json(graphData);
    
  } catch (error) {
    console.error('Error generating graph:', error);
    
    // Return fallback data on error
    res.json({
      nodes: initialNodes,
      childNodesMap: childNodesMap
    });
  }
}; 